services:
  # PostgreSQL Database - Development
  postgres:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME}-postgres-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      # 개발용 초기화 스크립트 (옵션)
      # - ./backend/scripts/init-dev.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - nara-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis Cache - Development
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME}-redis-dev
    command: redis-server --appendonly yes --loglevel notice
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - nara-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # FastAPI Backend - Development
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: ${PROJECT_NAME}-backend-dev
    environment:
      # Mode & Project Info
      MODE: ${MODE}
      PROJECT_NAME: ${PROJECT_NAME}
      APP_TITLE: ${APP_TITLE}
      APP_DESCRIPTION: ${APP_DESCRIPTION}
      APP_VERSION: ${APP_VERSION}
      # PostgreSQL Database
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # App settings
      APP_ENV: ${APP_ENV}
      DEBUG: ${DEBUG}
      LOG_LEVEL: ${LOG_LEVEL}
      SECRET_KEY: ${SECRET_KEY}
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      # API & Auth
      API_V1_STR: ${API_V1_STR}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      FIRST_SUPERUSER: ${FIRST_SUPERUSER}
      FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD}
      # Frontend
      VITE_API_URL: ${VITE_API_URL}
      NODE_ENV: ${NODE_ENV}
      # Hot reload
      RELOAD: "true"
    ports:
      - "${BACKEND_PORT}:8000"
      # 디버깅 포트 (옵션)
      - "${DEBUG_PORT}:5678"
    volumes:
      # .env 파일 마운트
      - ./.env:/app/.env:ro
      # 소스 코드 실시간 반영
      - ./backend:/app
      - backend_dev_data:/app/data
      # Python 캐시 제외
      - /app/__pycache__
      - /app/.pytest_cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nara-network-dev
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend - Development
  frontend:
    build:
      context: ./frontend/app
      dockerfile: Dockerfile.dev
      target: development
    container_name: ${PROJECT_NAME}-frontend-dev
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - NODE_ENV=${NODE_ENV}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - "${FRONTEND_PORT}:3000"
    volumes:
      # 소스 코드 실시간 반영
      - ./frontend/app:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - nara-network-dev
    command: npm run dev -- --host 0.0.0.0 --port 3000
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => process.exit(r.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Commander - 개발용 Redis GUI (옵션)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ${PROJECT_NAME}-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - nara-network-dev
    depends_on:
      - redis
    profiles:
      - tools

  # pgAdmin - 개발용 PostgreSQL GUI (옵션)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ${PROJECT_NAME}-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    networks:
      - nara-network-dev
    depends_on:
      - postgres
    profiles:
      - tools

networks:
  nara-network-dev:
    driver: bridge
    name: ${PROJECT_NAME}-network-dev

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  backend_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local
